import datetime as dt
import imaplib
import os

from aiogram.exceptions import AiogramError
from aiogram.utils.keyboard import InlineKeyboardBuilder
from pytz import timezone

import utils.constants as const
from config.bot_config import bot
from config.mail_config import (ADMIN_EMAIL, IMAP_MAIL_SERVER, MAIL_LOGIN,
                                MAIL_PASS)
from config.mongo_config import groups, msgs, reqs, users, gpa
from config.telegram_config import (EXPLOIT_GROUP_ID, MY_TELEGRAM_ID,
                                    SPCH_THREAD_ID)
from utils.backup_db import send_dbs_mail
from utils.get_mail import get_letters

SPCH_TIME_WORK_MSG = ('–í —Å—Ä–æ–∫ –¥–æ 12:00 —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –ø—Ä–æ—à—É –≤—ã–ª–æ–∂–∏—Ç—å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é –Ω–∞—Ä–∞–±–æ—Ç–∫—É –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü.\n\n'
                      '–ü—Ä–∏–º–µ—Ä:\n\n–ö–° ¬´–ü—Ä–∏–º–µ—Ä–Ω–∞—è¬ª:\n–ì–ü–ê 12 - 720\n–ì–ü–ê 24 - 9\n\n'
                      '–°–æ–±–ª—é–¥–∞–π—Ç–µ —Ñ–æ—Ä–º—É –ø—Ä–∏–º–µ—Ä–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö')


async def clear_msgs():
    queryset = list(msgs.find({}))
    for msg in queryset:
        try:
            await bot.delete_message(chat_id=int(msg['chat_id']), message_id=msg['msg_id'])
        except AiogramError:
            pass
        msgs.delete_one({'chat_id': msg['chat_id'], 'message_id': msg['msg_id']})


async def send_remainder():
    queryset = list(groups.find({'sub_banned': 'false'}))
    num_groups = groups.count_documents({'sub_banned': 'false'})
    await bot.send_message(
        chat_id=MY_TELEGRAM_ID,
        text=f'–í—Å–µ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –≥—Ä—É–ø–ø: {num_groups}'
    )
    count_groups = 0
    for group in queryset:
        id = group.get('_id')
        name = group.get('group_name')
        try:
            msg = await bot.send_message(chat_id=int(id), text=const.GROUP_REMAINDER)
            msgs.insert_one({'msg_id': msg.message_id, 'chat_id': id})
            await bot.send_message(
                chat_id=MY_TELEGRAM_ID,
                text=f'–ì—Ä—É–ø–ø–µ "{name}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'
            )
            count_groups = count_groups + 1
        except AiogramError:
            pass
    await bot.send_message(
        chat_id=MY_TELEGRAM_ID,
        text=('–ó–∞–¥–∞—á–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n'
              f'–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≥—Ä—É–ø–ø: {count_groups}')
    )


async def send_task_users_reminder():
    queryset = users.distinct('user_id')
    for user_id in queryset:
        try:
            await bot.send_message(
                chat_id=user_id,
                text=const.TASK_REMINDER,
            )
        except:
            pass


async def check_mailbox():
    mail_pass = MAIL_PASS
    username = MAIL_LOGIN
    imap_server = IMAP_MAIL_SERVER
    imap = imaplib.IMAP4_SSL(imap_server)
    status, res = imap.login(username, mail_pass)
    if status == 'OK' and imap:
        await get_letters(imap)


async def send_backups():
    cur_date = dt.datetime.now().strftime('%d-%m-%y')
    # backup_dir = f'C:\Dev\poks_bot\\var\\backups\mongobackups\{cur_date}'
    backup_dir = f'../../../var/backups/mongobackups/{cur_date}'
    for db_name in os.listdir(backup_dir):
        if db_name in ['poks_bot_db', 'tehnika_bot_db', 'quiz_db']:
            # backup_path = f'{backup_dir}\{db_name}'
            backup_path = f'{backup_dir}/{db_name}'
            emails = [ADMIN_EMAIL]
            await send_dbs_mail(emails, db_name, backup_path)


async def send_work_time_reminder():
    await bot.send_message(
        chat_id=EXPLOIT_GROUP_ID,
        text=SPCH_TIME_WORK_MSG,
        message_thread_id=SPCH_THREAD_ID
    )


async def find_overdue_requests():
    tz = timezone(const.TIME_ZONE)
    now = dt.datetime.now(tz)
    now_plus_5h = now + dt.timedelta(hours=5)

    res = list(reqs.find({
        'status': 'approved',
        'is_complete': False,
        'notification_datetime': {'$lt': now_plus_5h}
    }))

    message = f"{now.strftime('%d.%m.%Y %H:%M')} - –ù–∞–π–¥–µ–Ω–æ: {len(res)}\n"

    for doc in res:
        notification_time = doc['notification_datetime']
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –æ–¥–Ω–æ–º—É —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        if notification_time.tzinfo is None:
            notification_time = notification_time.replace(tzinfo=timezone('UTC'))
        notification_time = notification_time.astimezone(tz)

        time_diff = now_plus_5h - notification_time
        hours_diff = time_diff.total_seconds() / 3600  # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–µ–∫—É–Ω–¥—ã –≤ —á–∞—Å—ã

        message += (f"\n–ó–∞—è–≤–∫–∞ {doc['_id']}:\n"
                   f"–ü–ª–∞–Ω–æ–≤–æ–µ –≤—Ä–µ–º—è: {notification_time.strftime('%d.%m.%Y %H:%M')}\n"
                   f"–û—Ç—Å—Ç–∞–≤–∞–Ω–∏–µ: {hours_diff:.1f} —á–∞—Å–æ–≤\n"
                   f"–¢–µ–∫—Å—Ç: {doc.get('text', '–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞')}\n")

    await bot.send_message(
        chat_id=MY_TELEGRAM_ID,
        text=message
    )
    # for req in res:
    #     prime_date = req['datetime'].astimezone(tz).strftime('%d.%m.%Y %H:%M')
    #     req_date = req['request_datetime'].astimezone(tz).strftime('%d.%m.%Y %H:%M')
    #     gpa_instance = gpa.find_one({'_id': req['gpa_id']})
    #     msg_text=(
    #         f'–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç {prime_date} –Ω–∞ –ø—É—Å–∫ –ì–ü–ê ‚Ññ{gpa_instance["num_gpa"]} ({req["ks"]}) '
    #         f'–±—ã–ª —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω. –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ {req_date} —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º, –æ—Ç–≤–µ–¥–µ–Ω–Ω—ã–º –Ω–∞ –ø—É—Å–∫ '
    #         '–ø—Ä–æ—à–ª–æ.\n–ï—Å–ª–∏ –∑–∞–ø—É—Å–∫ –ì–ü–ê –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—É—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω".\n'
    #         '–ï—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –Ω–∞–∂–º–∏—Ç–µ "–ü—É—Å–∫ –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω"'
    #     )
    #     kb = InlineKeyboardBuilder()
    #     kb.button(text='üî¥ –ü—É—Å–∫ –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω', callback_data=f'launch_fail_{req["_id"]}')
    #     kb.button(text='üü¢ –ü—É—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω', callback_data=f'launch_success_{req["_id"]}')
    #     kb.adjust(1)
    #     try:
    #         await bot.send_message(
    #             chat_id=req['author_id'],
    #             text=msg_text,
    #             reply_markup=kb.as_markup()
    #         )
    #         await bot.send_message(
    #             chat_id=MY_TELEGRAM_ID,
    #             text='üü¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—É—Å–∫–∞'
    #         )
    #     except Exception as err:
    #         await bot.send_message(
    #             chat_id=MY_TELEGRAM_ID,
    #             text='üî¥ –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—É—Å–∫–∞'
    #         )
