import datetime as dt
import re
import asyncio

from aiogram_dialog import DialogManager, StartMode

import utils.constants as const
from config.bot_config import bot
from config.mongo_config import gpa, reqs, paths
from config.pyrogram_config import app
from config.telegram_config import BOT_ID, MY_TELEGRAM_ID, EXPLOIT_GROUP_ID
from dialogs.for_request.states import Request
from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest
from aiogram.utils.keyboard import InlineKeyboardBuilder


DATE_ERROR_MSG = (
    '–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞.\n'
    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å (–Ω–∞—á–∏–Ω–∞—è —Å —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è)'
)
TIME_ERROR_MSG = (
    '–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ –∏–ª–∏ –±–ª–∏–∑–∫–æ –∫ —Ç–µ–∫—É—â–µ–º—É.\n'
    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ —á–∞—Å –ø–æ–∑–∂–µ —Ç–µ–∫—É—â–µ–≥–æ.\n'
    '–ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ –≤—Ä–µ–º—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, —Ç–æ –∑–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –ø—É—Å–∫ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å.'
)


async def on_main_menu(callback, widget, manager: DialogManager):
    await manager.start(Request.select_station, mode=StartMode.RESET_STACK)


async def on_select_category(callback, widget, manager: DialogManager):
    category = widget.widget_id
    if category == 'paths':
        await manager.switch_to(Request.paths_info)
    elif category == 'new_request':
        await manager.switch_to(Request.select_station)
    elif category == 'my_requests':
        await manager.switch_to(Request.show_requests)
    elif category == 'inwork_requests':
        await manager.switch_to(Request.inwork_requests)


async def on_path_selected(callback, widget, manager: DialogManager):
    context = manager.current_context()
    _, _, path_type = widget.widget_id.split('_')
    context.dialog_data.update(path_type=path_type)
    await manager.switch_to(Request.select_num_stages)


async def on_num_stages_selected(callback, widget, manager: DialogManager):
    context = manager.current_context()
    _, _, num_stages = widget.widget_id.split('_')
    context.dialog_data.update(num_stages=num_stages)
    await manager.switch_to(Request.select_majors)


async def back_and_erase_widget_click(callbac, button, manager: DialogManager):
    widget = manager.find('s_majors')
    await widget.reset_checked()
    await manager.back()


async def on_majors_done(callback, widget, manager: DialogManager):
    context = manager.current_context()
    widget = manager.find('s_majors')
    context.dialog_data.update(majors=widget.get_checked())
    await manager.switch_to(Request.path_confirm)


async def path_save(callback, widget, manager: DialogManager):
    context = manager.current_context()
    num_stages = int(context.dialog_data['num_stages'])
    majors = context.dialog_data['majors']
    path_name = const.PATH_TYPE[context.dialog_data['path_type']]
    stages = {}
    for stage_num in range(1, num_stages + 1):
        stages[str(stage_num)] = int(majors[stage_num - 1])
    paths.update_one(
        {'path_type': path_name},
        {'$set': {'num_stages': num_stages, 'stages': stages}},
        upsert=True
    )
    widget = manager.find('s_majors')
    await widget.reset_checked()
    await manager.switch_to(Request.path_complete)


async def on_station_done(callback, widget, manager: DialogManager, station):
    context = manager.current_context()
    context.dialog_data.update(station=station)
    await manager.switch_to(Request.select_shop)


async def on_shop_done(callback, widget, manager: DialogManager, shop):
    context = manager.current_context()
    context.dialog_data.update(shop=shop)
    await manager.switch_to(Request.select_gpa)


async def on_gpa_done(callback, widget, manager: DialogManager, gpa_num):
    context = manager.current_context()
    context.dialog_data.update(gpa=gpa_num)
    await manager.switch_to(Request.select_date)


async def on_select_date(callback, widget, manager: DialogManager, clicked_date):
    context = manager.current_context()
    today = dt.datetime.now().date()
    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É –∏–ª–∏ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å
    if clicked_date < today or clicked_date.weekday() in (5, 6):
        error_message = DATE_ERROR_MSG
        await callback.answer(error_message, show_alert=True)
        await manager.switch_to(Request.select_date)
        return
    req_date = clicked_date.strftime('%d.%m.%Y')
    context.dialog_data.update(req_date=req_date)
    await manager.switch_to(Request.select_time)


async def on_select_time(callback, widget, manager: DialogManager, time: str):
    context = manager.current_context()
    today = dt.datetime.now().date()
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    req_date_str = context.dialog_data.get('req_date')
    try:
        req_date = dt.datetime.strptime(req_date_str, '%d.%m.%Y').date()
    except (ValueError, TypeError):
        req_date = today
    # –ü–∞—Ä—Å–∏–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    try:
        selected_time = dt.datetime.strptime(time, '%H:%M').time()
    except ValueError:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏", show_alert=True)
        return
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ - —Å–µ–≥–æ–¥–Ω—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
    if req_date == today:
        now = dt.datetime.now()
        current_time_plus_hour = (now + dt.timedelta(hours=1)).time()
        if selected_time < current_time_plus_hour:
            await callback.answer(TIME_ERROR_MSG, show_alert=True)
            await manager.switch_to(Request.select_time)
            return
    # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è
    context.dialog_data['req_time'] = time
    await manager.switch_to(Request.input_info)


async def on_input_info(callback, widget, manager: DialogManager, request_text):
    context = manager.current_context()
    context.dialog_data.update(request_text=request_text)
    try:
        await callback.delete()
    except Exception as e:
        pass
    try:
        await callback.bot.delete_message(
            chat_id=callback.from_user.id,
            message_id=callback.message_id - 1
        )
    except Exception as e:
        pass
    await manager.switch_to(Request.request_confirm)


async def on_confirm(callback, widget, manager: DialogManager):
    context = manager.current_context()
    request_datetime = dt.datetime.strptime(f"{context.dialog_data['req_date']} {context.dialog_data['req_time']}", "%d.%m.%Y %H:%M")
    gpa_instance = gpa.find_one({'ks': context.dialog_data['station'], 'num_gpa': context.dialog_data['gpa']})
    path_type = get_path_type(gpa_instance)
    path_instance = paths.find_one({'path_type': path_type})
    current_stage = 1
    req_id = reqs.insert_one({
        'author_id': manager.event.from_user.id,
        'ks': context.dialog_data['station'],
        'gpa_id': gpa_instance['_id'],
        'datetime': dt.datetime.now(),
        'text': context.dialog_data['request_text'],
        'path_id': path_instance['_id'],
        'status': 'inwork',
        'current_stage': current_stage,
        'request_datetime': request_datetime,
        'stages': {
            '1': {
                'status': 'pending',
                'datetime': dt.datetime.now(),
                'major_id': path_instance['stages']['1'],
            },
        }
    }).inserted_id
    await manager.switch_to(Request.request_finish)
    await send_request_to_major(req_id, current_stage)


def get_path_type(gpa_instance):
    type_gpa = gpa_instance['type_gpa']
    group_gpa = gpa_instance['group_gpa']
    if type_gpa == '–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã–µ' and group_gpa == '–ì–¢–ö-10-4':
        return '–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã–µ –ì–ü–ê (–ì–¢–ö-10-4)'
    elif type_gpa == '–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã–µ':
        return '–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã–µ –ì–ü–ê'
    elif type_gpa == '–ê–≤–∏–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–∏–≤–æ–¥':
        return '–ì–ü–ê —Å –∞–≤–∏–∞. –ø—Ä–∏–≤–æ–¥–æ–º'
    elif type_gpa == '–°—É–¥–æ–≤–æ–π –ø—Ä–∏–≤–æ–¥':
        return '–ì–ü–ê —Å —Å—É–¥–æ–≤—ã–º –ø—Ä–∏–≤–æ–¥–æ–º'


async def send_request_to_major(req_id, current_stage):
    req = reqs.find_one({'_id': req_id})
    path_instance = paths.find_one({'_id': req['path_id']})
    gpa_instance = gpa.find_one({'_id': req['gpa_id']})
    author_name = (await bot.get_chat(req['author_id'])).full_name
    while current_stage <= path_instance['num_stages']:
        major_stage_id = path_instance['stages'][str(current_stage)]
        stages_text = await build_stages_text(req_id, path_instance, current_stage)
        request_text = (
            f"<b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—É—Å–∫ –ì–ü–ê</b>\n"
            f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {req['datetime'].strftime('%d.%m.%Y %H:%M')}\n"
            f"üè≠ –°—Ç–∞–Ω—Ü–∏—è: {req['ks']}\n"
            f"üë§ –ê–≤—Ç–æ—Ä: {author_name}\n\n"
            f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ì–ü–ê:</b>\n"
            f"–°—Ç.‚Ññ –ì–ü–ê: {gpa_instance['num_gpa']}\n"
            f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ì–ü–ê: {gpa_instance['name_gpa']}\n"
            f"–¢–∏–ø –ì–ü–ê: {gpa_instance['type_gpa']}\n"
            f"–¢–∏–ø –Ω–∞–≥–Ω–µ—Ç–∞—Ç–µ–ª—è: {gpa_instance['cbn_type']}\n\n"
            f"<b>–ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:</b>\n{req['request_datetime'].strftime('%d.%m.%Y %H:%M')}\n\n"
            f"<b>–¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞:</b>\n<i>{req['text']}</i>\n\n"
            f"<b>–°—Ç–∞—Ç—É—Å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è:</b>\n{stages_text}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–≥–ª–∞—Å—É–π—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å:"
        )
        kb = InlineKeyboardBuilder()
        kb.button(text='üî¥ –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f'req_reject_{req_id}_{current_stage}')
        kb.button(text='üü¢ –°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å', callback_data=f'req_apply_{req_id}_{current_stage}')
        kb.adjust(2)
        try:
            await bot.send_message(major_stage_id, text=request_text, reply_markup=kb.as_markup())
            reqs.update_one({'_id': req_id}, {'$set': {
                f'stages.{current_stage}': {
                    'datetime': dt.datetime.now(),
                    'major_id': major_stage_id,
                    'status': 'inwork'
                },
                'current_stage': current_stage
            }})
            break
        except (TelegramForbiddenError, TelegramBadRequest):
            reqs.update_one({'_id': req_id}, {'$set': {
                f'stages.{current_stage}.status': 'pass',
                f'stages.{current_stage}.datetime': dt.datetime.now(),
                f'stages.{current_stage}.major_id': major_stage_id
            }})
            current_stage += 1
            req = reqs.find_one({'_id': req_id})
        except Exception:
            break
    else:
        # await send_notify(req_id, gpa_instance, path_instance, is_fallback=True, is_group=True)
        pass


async def build_stages_text(req_id, path_instance, current_stage):
    result = ''
    req = reqs.find_one({'_id': req_id})
    for stage_num in range(1, path_instance['num_stages'] + 1):
        stage_data = req['stages'].get(str(stage_num), {})
        status = stage_data.get('status', 'inwork' if stage_num == current_stage else 'pending')
        icon = {'apply': 'üü¢', 'reject': 'üî¥', 'pass': '‚ö´'}.get(status, '‚ö™')
        if stage_num == current_stage:
            major_name = '—Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø'
        else:
            try:
                major_name = (await bot.get_chat(stage_data['major_id'])).full_name if 'major_id' in stage_data else '–æ–∂–∏–¥–∞–µ—Ç—Å—è'
            except:
                major_name = '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
        date_str = stage_data.get('datetime', '').strftime('%d.%m.%Y %H:%M') if 'datetime' in stage_data else ""
        result += f"{icon} –≠—Ç–∞–ø {stage_num} - {major_name}" + (f" ({date_str})" if date_str else "") + "\n"
    return result


async def send_notify(req_id, gpa_instance, path, is_fallback=False, is_group=True, reason='', is_rejected=False):
    req = reqs.find_one({'_id': req_id})
    if not req:
        return
    author_name = (await bot.get_chat(req['author_id'])).full_name
    gpa_info = (
        f'<b>–°—Ç.‚Ññ –ì–ü–ê:</b> {gpa_instance["num_gpa"]}\n'
        f'<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ì–ü–ê:</b> {gpa_instance["name_gpa"]}\n'
        f'<b>–¢–∏–ø –ì–ü–ê:</b> {gpa_instance["type_gpa"]}\n'
        f'<b>–¢–∏–ø –Ω–∞–≥–Ω–µ—Ç–∞—Ç–µ–ª—è:</b> {gpa_instance["cbn_type"]}'
    )
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ —Å—Ç–∞—Ç—É—Å–∞
    if is_group:
        if is_fallback:
            header = '‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –ø—É—Å–∫–∞ –ì–ü–ê, –Ω–æ –∞–¥—Ä–µ—Å–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã\n\n'
        else:
            header = '‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—É—Å–∫ –ì–ü–ê —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω\n\n'
    else:
        if is_rejected:
            header = f'üî¥ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ:\n<i>{reason}</i>\n\n'
        else:
            header = 'üü¢ –í–∞—à –∑–∞–ø—Ä–æ—Å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω!\n\n'
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–¥–∏—è—Ö —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è
    stages_text = ''
    if not is_fallback and not is_rejected:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç–∞–ø—ã –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è
        for stage_num in range(1, path['num_stages'] + 1):
            stage_data = req['stages'].get(str(stage_num), {})
            status = stage_data.get('status', 'pending')
            icon = ('üü¢' if status == 'apply' else
                   'üî¥' if status == 'reject' else
                   '‚ö´' if status == 'pass' else '‚ö™')
            major_name = '–æ–∂–∏–¥–∞–µ—Ç—Å—è'
            if 'major_id' in stage_data:
                try:
                    major_chat = await bot.get_chat(stage_data['major_id'])
                    major_name = major_chat.full_name
                except:
                    major_name = '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
            date_str = stage_data.get('datetime', '').strftime('%d.%m.%Y %H:%M') if 'datetime' in stage_data else ""
            stages_text += f"{icon} –≠—Ç–∞–ø {stage_num} - {major_name}" + (f" ({date_str})" if date_str else "") + "\n"
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    request_text = (
        f"{header}"
        f"üìÖ –î–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞: {req['datetime'].strftime('%d.%m.%Y %H:%M')}\n"
        f"üè≠ –°—Ç–∞–Ω—Ü–∏—è: {req['ks']}\n"
        f"üë§ –ê–≤—Ç–æ—Ä: {author_name}\n\n"
        f"<u>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ì–ü–ê:</u>\n{gpa_info}\n\n"
        f"<b>–¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞:</b>\n<i>{req['text']}</i>\n"
    )
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–¥–∏—è—Ö –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è
    if not is_fallback and not is_rejected and stages_text:
        request_text += f"\n<b>–≠—Ç–∞–ø—ã —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è:</b>\n{stages_text}\n"
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        if is_group:
            await bot.send_message(
                chat_id=EXPLOIT_GROUP_ID,
                # message_thread_id=REQUEST_THREAD_ID,
                text=request_text
            )
        else:
            message_effect = '5104858069142078462' if is_fallback else '5046509860389126442'
            await bot.send_message(
                chat_id=req['author_id'],
                message_effect_id=message_effect,
                text=request_text
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
