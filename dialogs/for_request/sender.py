import asyncio
import datetime as dt
import re

from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram_dialog import DialogManager, StartMode

import utils.constants as const
from config.bot_config import bot
from config.mongo_config import gpa, paths, reqs
from config.pyrogram_config import app
from config.telegram_config import BOT_ID, EXPLOIT_GROUP_ID, MY_TELEGRAM_ID
from dialogs.for_request.sender import send_request_to_major
from dialogs.for_request.states import Request


async def send_request_to_major(req_id, current_stage):
    req = reqs.find_one({'_id': req_id})
    path_instance = paths.find_one({'_id': req['path_id']})
    gpa_instance = gpa.find_one({'_id': req['gpa_id']})
    num_stages = path_instance['num_stages']
    stages = path_instance['stages']
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ
    author = await bot.get_chat(req['author_id'])
    author_name = author.full_name
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ì–ü–ê
    gpa_info = (
        f'–°—Ç.‚Ññ –ì–ü–ê:{gpa_instance["num_gpa"]}\n'
        f'–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ì–ü–ê: {gpa_instance["name_gpa"]}\n'
        f'–¢–∏–ø –ì–ü–ê: {gpa_instance["type_gpa"]}\n'
        f'–¢–∏–ø –Ω–∞–≥–Ω–µ—Ç–∞—Ç–µ–ª—è: {gpa_instance["cbn_type"]}'
    )
    while current_stage <= num_stages:
        stages_text = ""
        for stage_num in range(1, num_stages + 1):
            stage_data = req['stages'].get(str(stage_num), {})
            status = stage_data.get('status', 'inwork' if stage_num == current_stage else 'pending')
            icon = ('üü¢' if status == 'apply' else
                   'üî¥' if status == 'reject' else
                   '‚ö´' if status == 'pass' else '‚ö™')
            major_name = "–æ–∂–∏–¥–∞–µ—Ç—Å—è"
            if 'major_id' in stage_data:
                try:
                    major_chat = await bot.get_chat(stage_data['major_id'])
                    major_name = major_chat.full_name
                except:
                    major_name = "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            date_str = stage_data.get('datetime', '').strftime('%d.%m.%Y %H:%M') if 'datetime' in stage_data else ""
            stages_text += f"{icon} –≠—Ç–∞–ø {stage_num} - {major_name}" + (f" ({date_str})" if date_str else "") + "\n"
        request_text = (
            f"<b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—É—Å–∫ –ì–ü–ê</b>\n"
            f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {req['datetime'].strftime('%d.%m.%Y %H:%M')}\n"
            f'üë§ –ê–≤—Ç–æ—Ä: {author_name}\n'
            f"üè≠ –°—Ç–∞–Ω—Ü–∏—è: {req['ks']}\n\n"
            f'<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ì–ü–ê:</b>\n<code>{gpa_info}</code>\n\n'
            f"<b>–ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:</b>\n{req['request_datetime'].strftime('%d.%m.%Y - %H:%M')}\n\n"
            f"<b>–¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞:</b>\n<i>'{req['text']}'</i>\n\n"
            f"<b>–°—Ç–∞—Ç—É—Å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è:</b>\n{stages_text}\n"
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–≥–ª–∞—Å—É–π—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å:'
        )
        major_stage_id = stages[str(current_stage)]
        kb = InlineKeyboardBuilder()
        kb.button(text='üî¥ –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f'req_reject_{req_id}_{current_stage}')
        kb.button(text='üü¢ –°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å', callback_data=f'req_apply_{req_id}_{current_stage}')
        kb.adjust(2)
        try:
            await bot.send_message(
                major_stage_id,
                text=request_text,
                reply_markup=kb.as_markup(),
            )
            # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            reqs.update_one(
                {'_id': req_id},
                {'$set': {
                    f'stages.{current_stage}': {
                        'datetime': dt.datetime.now(),
                        'major_id': major_stage_id,
                        'status': 'inwork'
                    },
                    'current_stage': current_stage
                }}
            )
            break
        except (TelegramForbiddenError, TelegramBadRequest):
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∫ "–ø—Ä–æ–ø—É—â–µ–Ω" –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
            reqs.update_one(
                {'_id': req_id},
                {'$set': {
                    f'stages.{current_stage}.status': 'pass',
                    f'stages.{current_stage}.datetime': dt.datetime.now(),
                    f'stages.{current_stage}.major_id': major_stage_id
                }}
            )
            current_stage += 1
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ –ë–î –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            req = reqs.find_one({'_id': req_id})
        except Exception as e:
            break
    else:
        request_text = (
            f"<b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—É—Å–∫ –ì–ü–ê</b>\n\n"
            f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {req['datetime'].strftime('%d.%m.%Y %H:%M')}\n"
            f'üë§ –ê–≤—Ç–æ—Ä: {author_name}\n'
            f"üè≠ –°—Ç–∞–Ω—Ü–∏—è: {req['ks']}\n\n"
            f'<u>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ì–ü–ê:</u>\n{gpa_info}\n\n'
            f"<b>–¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞:</b>\n<i>{req['text']}</i>\n\n"
        )
        await bot.send_message(
            chat_id=EXPLOIT_GROUP_ID,
            text=request_text,
            # message_thread_id=SPCH_THREAD_ID
        )



@router.callback_query(F.data.startswith('req_'))
async def handle_request_decision(call: CallbackQuery, state: FSMContext):
    _, status, req_id, current_stage = call.data.split('_')
    current_stage = int(current_stage)
    req_id = ObjectId(req_id)
    user_id = call.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
    req = reqs.find_one({'_id': req_id})
    gpa_instance = gpa.find_one({'_id': req['gpa_id']})
    if not req:
        await call.answer("–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    path = paths.find_one({'_id': req['path_id']})
    num_stages = path['num_stages']
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
    update_data = {
        f'stages.{current_stage}.status': status,
        f'stages.{current_stage}.datetime': dt.datetime.now(),
        f'stages.{current_stage}.major_id': user_id
    }
    if status == 'reject':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        reqs.update_one(
            {'_id': req_id},
            {'$set': {
                **update_data,
                'status': 'rejected'
            }}
        )
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
        try:
            await bot.send_message(
                req['author_id'],
                f"üî¥ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω –Ω–∞ —ç—Ç–∞–ø–µ {current_stage}\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {call.message.text.split('–ü—Ä–∏—á–∏–Ω–∞:')[1] if '–ü—Ä–∏—á–∏–Ω–∞:' in call.message.text else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∞: {e}")
        await call.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω. –ê–≤—Ç–æ—Ä –∑–∞—è–≤–∫–∏ –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª—ë–Ω –æ–± —ç—Ç–æ–º")
        await call.message.edit_reply_markup()  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    elif status == 'apply':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è
        next_stage = current_stage + 1
        if next_stage > path['num_stages']:
            # –í—Å–µ —ç—Ç–∞–ø—ã –ø—Ä–æ–π–¥–µ–Ω—ã
            reqs.update_one(
                {'_id': req_id},
                {'$set': {
                    **update_data,
                    'status': 'approved'
                }}
            )
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
            try:
                await bot.send_message(
                    req['author_id'],
                    f"üü¢ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω!\n"
                    f"–í—Å–µ —ç—Ç–∞–ø—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∞: {e}")
            try:
                gpa_info = (
                    f'<b>–°—Ç.‚Ññ –ì–ü–ê:</b> {gpa_instance["num_gpa"]}\n'
                    f'<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ì–ü–ê:</b> {gpa_instance["name_gpa"]}\n'
                )
                stages_text = ''
                for stage_num in range(1, num_stages + 1):
                    stage_data = req['stages'].get(str(stage_num), {})
                    status = stage_data.get('status', 'inwork' if stage_num == current_stage else 'pending')
                    icon = ('üü¢' if status == 'apply' else
                        'üî¥' if status == 'reject' else
                        '‚ö´' if status == 'pass' else '‚ö™')
                    major_name = '–æ–∂–∏–¥–∞–µ—Ç—Å—è'
                    if 'major_id' in stage_data:
                        try:
                            major_chat = await bot.get_chat(stage_data['major_id'])
                            major_name = major_chat.full_name
                        except:
                            major_name = "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                    date_str = stage_data.get('datetime', '').strftime('%d.%m.%Y %H:%M') if 'datetime' in stage_data else ""
                    stages_text += f"{icon} –≠—Ç–∞–ø {stage_num} - {major_name}" + (f" ({date_str})" if date_str else "") + "\n"
                request_text = (
                    f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏ –ø—É—Å–∫–∞ –ì–ü–ê</b>\n\n"
                    f"üìÖ –î–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞: {req['datetime'].strftime('%d.%m.%Y %H:%M')}\n"
                    f"üè≠ –°—Ç–∞–Ω—Ü–∏—è: {req['ks']}\n\n"
                    f'<u>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ì–ü–ê:</u>\n{gpa_info}\n\n'
                    # f"<b>–°—Ç–∞—Ç—É—Å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è:</b>\n{stages_text}\n"
                    f"<b>–¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞:</b>\n<i>{req['text']}</i>\n\n"
                )
                await bot.send_message(
                    chat_id=EXPLOIT_GROUP_ID,
                    text='123',
                    # message_thread_id=SPCH_THREAD_ID
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã: {e}")
            await call.answer("–ó–∞–ø—Ä–æ—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω!")
            await call.message.edit_reply_markup()  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
        else:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
            reqs.update_one(
                {'_id': req_id},
                {'$set': {
                    **update_data,
                    'current_stage': next_stage
                }}
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–≥–ª–∞—Å—É—é—â–µ–º—É
            try:
                await send_request_to_major(req_id, next_stage)
                await call.answer("–ó–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–≥–ª–∞—Å—É—é—â–µ–º—É")
                await call.message.edit_reply_markup()  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–≥–ª–∞—Å—É—é—â–µ–º—É: {e}")
                await call.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
