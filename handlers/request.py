import asyncio
import datetime as dt

from aiogram import F, Router
from aiogram.enums import ChatType
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram_dialog import Dialog, DialogManager, StartMode
from bson import ObjectId
from aiogram.utils.media_group import MediaGroupBuilder
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config.bot_config import bot
from config.mongo_config import gpa, paths, reqs, buffer
# from config.telegram_config import EXPLOIT_GROUP_ID, MY_TELEGRAM_ID
from dialogs.for_request import windows
from dialogs.for_request.selected import send_notify, send_request_to_major
from dialogs.for_request.states import Request

router = Router()

dialog =  Dialog(
    windows.select_category_window(),

    windows.select_type_request_window(),  # –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞ (–±–µ–∑ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ–º)
    windows.stations_window(),
    windows.shops_window(),
    windows.gpa_window(),

    windows.select_epb_window(),

    windows.date_window(),
    windows.time_window(),

    windows.select_resource_window(),
    windows.select_resource_act_window(),
    windows.input_resource_act_file_window(),  # –∫–∞–∂–¥—ã–π 2-–æ–π –∑–∞–ø—Ä–æ—Å
    windows.input_out_of_resource_reason_window(),

    windows.select_protocol_window(),
    windows.input_protocol_file_window(),  # –∫–∞–∂–¥—ã–π 4-–æ–π –∑–∞–ø—Ä–æ—Å

    windows.select_card_window(),
    windows.input_card_file_window(),  # –∫–∞–∂–¥—ã–π 6-–æ–π –∑–∞–ø—Ä–æ—Å

    windows.show_reject_window(),
    windows.input_info_window(),
    windows.request_confirm_window(),
    windows.finish_window(),

    windows.inwork_requests_window(),
    windows.show_inwork_single_request_window(),

    windows.select_sorting_requests_window(),
    windows.date_sort_requests_window(),
    windows.status_sort_requests_window(),
    windows.ks_sort_requests_window(),
    windows.show_list_requests_window(),
    windows.show_single_request_window(),

    windows.paths_info_window(),
    windows.select_num_stage(),
    windows.select_majors_window(),
    windows.confirm_path_window(),
    windows.complete_path_window(),
)


@router.message(Command('request'), F.chat.type == ChatType.PRIVATE)
async def make_request(message: Message, dialog_manager: DialogManager):
    await message.delete()
    await dialog_manager.start(Request.select_category, mode=StartMode.RESET_STACK)


@router.callback_query(F.data.startswith('req_reject_'))
async def handle_reject_request(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø—Ä–∏—á–∏–Ω—ã"""
    _, _, req_id, current_stage = call.data.split('_')
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM
    await state.update_data(
        req_id=req_id,
        current_stage=current_stage,
        message_to_delete=call.message.message_id
    )
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞
    await call.message.edit_text(
        "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:",
        reply_markup=None
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã
    await state.set_state("waiting_reject_reason")


@router.message(F.text, StateFilter("waiting_reject_reason"))
async def process_reject_reason(message: Message, state: FSMContext, bot):
    data = await state.get_data()
    req_id = ObjectId(data['req_id'])
    current_stage = int(data['current_stage'])
    user_id = message.from_user.id
    req = reqs.find_one({'_id': req_id})
    path = paths.find_one({'_id': req['path_id']})
    gpa_instance = gpa.find_one({'_id': req['gpa_id']})
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await bot.delete_message(
            chat_id=message.chat.id,
            message_id=data['message_to_delete']
        )
        await message.delete()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    if not req:
        await message.answer("–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    update_data = {
        f'stages.{current_stage}.status': 'reject',
        f'stages.{current_stage}.datetime': dt.datetime.now(),
        f'stages.{current_stage}.major_id': user_id,
        f'stages.{current_stage}.reason': message.text,
        'status': 'rejected',
        'reject_reason': message.text
    }
    reqs.update_one({'_id': req_id}, {'$set': update_data})
    try:
        await send_notify(req_id, gpa_instance, path, is_fallback=True, is_group=False, reason=message.text, is_rejected=True)
    except Exception as e:
        pass
    await message.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω. –ê–≤—Ç–æ—Ä –∑–∞—è–≤–∫–∏ —É–≤–µ–¥–æ–º–ª—ë–Ω –æ –ø—Ä–∏—á–∏–Ω–µ.")
    await state.clear()


@router.callback_query(F.data.startswith('req_apply_'))
async def handle_apply_request(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è"""
    _, _, req_id, current_stage = call.data.split('_')
    current_stage = int(current_stage)
    req_id = ObjectId(req_id)
    user_id = call.from_user.id
    req = reqs.find_one({'_id': req_id})
    if not req:
        await call.answer("–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    path = paths.find_one({'_id': req['path_id']})
    gpa_instance = gpa.find_one({'_id': req['gpa_id']})
    update_data = {
        f'stages.{current_stage}.status': 'apply',
        f'stages.{current_stage}.datetime': dt.datetime.now(),
        f'stages.{current_stage}.major_id': user_id
    }
    next_stage = current_stage + 1
    if next_stage > path['num_stages']:
        reqs.update_one({'_id': req_id}, {'$set': {**update_data, 'status': 'approved'}})
        try:
            # await send_notify(req_id, gpa_instance, path, is_fallback=False, is_group=True)  # –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
            await send_notify(req_id, gpa_instance, path, is_fallback=False, is_group=False)  # –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä—É
        except Exception as e:
            print(f'–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã: {e}')
        await call.answer('–ó–∞–ø—Ä–æ—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω!')
    else:
        reqs.update_one({'_id': req_id}, {'$set': {**update_data, 'current_stage': next_stage}})
        try:
            await send_request_to_major(req_id, next_stage)
            await call.answer('–ó–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–≥–ª–∞—Å—É—é—â–µ–º—É')
        except Exception as e:
            print(f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–≥–ª–∞—Å—É—é—â–µ–º—É: {e}')
            await call.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –∑–∞–ø—Ä–æ—Å–∞', show_alert=True)
    await call.message.delete()


@router.callback_query(F.data.startswith('launch_fail_'))
async def handle_fail_launch(call: CallbackQuery, state: FSMContext):
    _, _, req_id = call.data.split('_')
    # await call.message.delete()
    await state.update_data(req_id=req_id, message_to_delete=call.message.message_id)
    await call.message.edit_text(
        '‚ùì –£–∫–∞–∂–∏—Ç–µ <u>–ø—Ä–∏—á–∏–Ω—É</u>, –ø–æ—á–µ–º—É –ø—É—Å–∫ –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à—ë–Ω:',
        reply_markup=None
    )
    await state.set_state('waiting_fail_reason')


@router.message(F.text, StateFilter("waiting_fail_reason"))
async def process_reject_reason(message: Message, state: FSMContext, bot):
    data = await state.get_data()
    req_id = ObjectId(data['req_id'])
    reason = message.text
    reqs.update_one(
        {'_id': req_id},
        {'$set': {'is_complete': True, 'fail_reason': reason, 'is_fail': True}}
    )
    req = reqs.find_one({'_id': req_id})
    req_date = req['request_datetime'].strftime('%d.%m.%Y %H:%M')
    gpa_instance = gpa.find_one({'_id': req['gpa_id']})
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await bot.delete_message(
            chat_id=message.chat.id,
            message_id=data['message_to_delete']
        )
        await message.delete()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    stages = req['stages']
    for stage in stages.values():
        try:
            await bot.send_message(
                chat_id=stage['major_id'],
                text=(
                    f'üü† –ü—É—Å–∫ <b>–ì–ü–ê ‚Ññ{gpa_instance["num_gpa"]}</b> ({req["ks"]}), '
                    f'–∫–æ—Ç–æ—Ä—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª—Å—è –Ω–∞ <u>{req_date}</u>, <b>–Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω</b> –ø–æ –ø—Ä–∏—á–∏–Ω–µ:\n<i>{reason}</i>'
                ),
            )
        except:
            pass
    await message.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –ü–û–≠–ö–° —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ –ø—Ä–∏—á–∏–Ω–µ.")
    await state.clear()


@router.callback_query(F.data.startswith('launch_success_'))
async def handle_success_launch(call: CallbackQuery):
    _, _, req_id = call.data.split('_')
    await call.message.delete()
    req_id = ObjectId(req_id)
    req = reqs.find_one({'_id': req_id})
    reqs.update_one({'_id': req_id}, {'$set': {'is_complete': True}})
    req_date = req['request_datetime'].strftime('%d.%m.%Y %H:%M')
    gpa_instance = gpa.find_one({'_id': req['gpa_id']})
    stages = req['stages']
    for stage in stages.values():
        try:
            await bot.send_message(
                chat_id=stage['major_id'],
                text=(
                    f'üü¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª, —á—Ç–æ –ø—É—Å–∫ <b>–ì–ü–ê ‚Ññ{gpa_instance["num_gpa"]}</b> '
                    f'({req["ks"]}), –∫–æ—Ç–æ—Ä—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª—Å—è –Ω–∞ <u>{req_date}</u> –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ'
                ),
                message_effect_id='5046509860389126442'
            )
        except:
            pass


@router.callback_query(F.data.startswith('req_files_'))
async def show_request_files(call: CallbackQuery):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞—è–≤–∫–∏
        _, _, req_id_str = call.data.split('_')[:3]
        req_id = ObjectId(req_id_str)
        # –ò—â–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑–µ
        req = reqs.find_one({'_id': req_id})
        if not req or not req.get('files'):
            await call.answer("–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return
        files = req['files']
        sent_messages = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        sent_files = False
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–æ—Ç–æ
        photos = [(t, f) for t, f in files.items() if f and f['type'] == 'photo']
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≥—Ä—É–ø–ø–∞–º–∏ –ø–æ 10
        if photos:
            media_group = MediaGroupBuilder()
            for i, (file_type, file_data) in enumerate(photos, 1):
                media_group.add_photo(
                    media=file_data['id'],
                    caption=f"üì∑ {file_type}" if i == 1 else ""
                )
                if i % 10 == 0 or i == len(photos):
                    messages = await call.message.answer_media_group(media=media_group.build())
                    sent_messages.extend([msg.message_id for msg in messages])
                    sent_files = True
                    if i < len(photos):
                        media_group = MediaGroupBuilder()
                        await asyncio.sleep(1)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –æ–¥–Ω–æ–º—É
        documents = [(t, f) for t, f in files.items() if f and f['type'] == 'file']
        for file_type, file_data in documents:
            try:
                msg = await call.message.answer_document(
                    document=file_data['id'],
                    caption=f"üìÑ {file_type}: {file_data.get('name', '—Ñ–∞–π–ª')}"
                )
                sent_messages.append(msg.message_id)
                sent_files = True
                await asyncio.sleep(0.5)
            except Exception:
                pass
        if not sent_files:
            await call.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã", show_alert=True)
            return
        buffer_msgs_id = buffer.insert_one({'sent_messages': sent_messages}).inserted_id
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π —Å–∫—Ä—ã—Ç–∏—è
        kb = InlineKeyboardBuilder()
        kb.button(
            text="‚ùå –°–∫—Ä—ã—Ç—å —Ñ–∞–π–ª—ã",
            callback_data=f"hide_files_{buffer_msgs_id}"
        )
        await call.message.answer(
            "–î–ª—è —Å–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É",
            reply_markup=kb.as_markup()
        )
        await call.answer()
    except Exception as e:
        await call.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤ {str(e)}", show_alert=True)


@router.callback_query(F.data.startswith('hide_files_'))
async def hide_files(call: CallbackQuery):
    _, _, msg_ids = call.data.split('_')
    try:
        data = buffer.find_one({'_id': ObjectId(msg_ids)})
        for msg_id in data.get('sent_messages', []):
            try:
                await call.bot.delete_message(chat_id=call.message.chat.id, message_id=msg_id)
            except Exception as e:
                pass
        try:
            await call.message.delete()
        except Exception as e:
            pass
        buffer.delete_one({'_id': ObjectId(msg_ids)})
    except Exception:
        await call.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–æ–≤", show_alert=True)
