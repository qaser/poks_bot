import datetime as dt
import asyncio

from aiogram import F, Router
from aiogram.types import Message

from config.bot_config import bot
from aiogram.filters import Command
from config.mongo_config import users_collection, messages_collection, migration_status_collection
from config.telegram_config import MY_TELEGRAM_ID, NEW_OTKAZ_GROUP, OTKAZ_GROUP_ID
from config.pyrogram_config import app
from utils.utils import report_error

router = Router()


async def save_chat_members(chat_id: int):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã"""
    try:
        members_count = 0
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (—ç—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ –±–æ—Ç—É)
        administrators = await bot.get_chat_administrators(chat_id)

        for admin in administrators:
            user = admin.user
            if await save_user(user):
                members_count += 1

        print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {members_count}")
        return members_count

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
        return 0


async def save_user(user) -> bool:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        user_data = {
            "user_id": user.id,
            "username": user.username,
            "first_name": user.first_name,
            "last_name": user.last_name,
            "is_bot": user.is_bot,
            "saved_at": dt.datetime.now()
        }

        users_collection.update_one(
            {"user_id": user.id},
            {"$set": user_data},
            upsert=True
        )
        return True

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False


async def migrate_messages_to_new_chat():
    """–ü–µ—Ä–µ–Ω–æ—Å–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = list(messages_collection.find().sort("date", 1))

        print(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")

        failed_messages = []
        success_count = 0

        for message_data in messages:
            try:
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã
                await asyncio.sleep(0.5)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await bot.send_message(
                    chat_id=NEW_OTKAZ_GROUP,
                    text=f"üí¨ {message_data['text']}\n\n"
                         f"üìÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message_data['date'].strftime('%Y-%m-%d %H:%M')}"
                )
                success_count += 1

                print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {success_count}/{len(messages)}")

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message_data['message_id']}: {e}")
                failed_messages.append({
                    "message_id": message_data["message_id"],
                    "error": str(e)
                })

        print(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}, –æ—à–∏–±–æ–∫: {len(failed_messages)}")
        return success_count, failed_messages

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        return 0, []


async def invite_users_to_new_chat():
    """–î–æ–±–∞–≤–ª—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É"""
    try:
        users = list(users_collection.find({"is_bot": False}))  # –ù–µ –ø—Ä–∏–≥–ª–∞—à–∞–µ–º –±–æ—Ç–æ–≤
        failed_invites = []
        success_count = 0

        print(f"–ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        for user_data in users:
            try:
                user_id = user_data["user_id"]

                # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é
                try:
                    await bot.ban_chat_member(NEW_OTKAZ_GROUP, user_id)
                    await asyncio.sleep(0.1)
                    await bot.unban_chat_member(NEW_OTKAZ_GROUP, user_id)

                    success_count += 1
                    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω")

                except Exception as invite_error:
                    # –ï—Å–ª–∏ –ø—Ä—è–º–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, —Å–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
                    try:
                        invite_link = await bot.create_chat_invite_link(
                            NEW_OTKAZ_GROUP,
                            member_limit=1,
                            creates_join_request=True
                        )

                        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        # –ù–æ –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ª–∏—á–Ω–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

                        failed_invites.append({
                            "user_id": user_id,
                            "username": user_data.get("username"),
                            "error": "–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ",
                            "invite_link": invite_link.invite_link
                        })

                    except Exception as link_error:
                        failed_invites.append({
                            "user_id": user_id,
                            "username": user_data.get("username"),
                            "error": str(link_error)
                        })

                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(1)

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_data['user_id']}: {e}")
                failed_invites.append({
                    "user_id": user_data["user_id"],
                    "username": user_data.get("username"),
                    "error": str(e)
                })

        print(f"–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {success_count}, –æ—à–∏–±–æ–∫: {len(failed_invites)}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
        migration_status_collection.update_one(
            {"migration_type": "user_invites"},
            {"$set": {
                "failed_invites": failed_invites,
                "success_count": success_count,
                "processed_at": dt.datetime.now()
            }},
            upsert=True
        )

        return success_count, failed_invites

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return 0, []


async def save_chat_history(chat_id: int):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥—Ä—É–ø–ø—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        chat = await bot.get_chat(chat_id)
        print(f"–ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —á–∞—Ç–∞: {chat.title}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        await save_chat_members(chat_id)

        # –ü–æ–ª—É—á–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        message_count = 0
        last_message_id = None

        while True:
            messages = await get_messages_batch(chat_id, last_message_id)
            if not messages:
                break

            for message in messages:
                if await save_message(message):
                    message_count += 1
                last_message_id = message.message_id

            print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}")

            # –ü–∞—É–∑–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API
            await asyncio.sleep(0.1)

        print(f"–í—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}")
        return message_count

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return 0


async def save_message(message: Message) -> bool:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
        if not message.text and not message.caption:
            return False

        message_data = {
            "message_id": message.message_id,
            "chat_id": message.chat.id,
            "user_id": message.from_user.id if message.from_user else None,
            "text": message.text or message.caption,
            "date": message.date,
            "content_type": message.content_type,
            "saved_at": dt.datetime.now()
        }

        messages_collection.insert_one(message_data)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False


async def get_messages_batch(chat_id: int, last_message_id: int = None):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–∞—á–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ 100) –∏—Å–ø–æ–ª—å–∑—É—è Pyrogram"""
    try:
        messages = []
        limit = 100

        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω last_message_id, –ø–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –Ω–µ–≥–æ
        if last_message_id:
            messages = await app.get_chat_history(
                chat_id=chat_id,
                limit=limit,
                offset_id=last_message_id
            )
        else:
            # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å - –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = await app.get_chat_history(
                chat_id=chat_id,
                limit=limit
            )

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤ —Å–ø–∏—Å–æ–∫
        messages_list = []
        async for message in messages:
            messages_list.append(message)
            if len(messages_list) >= limit:
                break
        await bot.send_message(
            chat_id=MY_TELEGRAM_ID,
            text=f"–ü–æ–ª—É—á–µ–Ω–æ {len(messages_list)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞ {chat_id}"
        )
        return messages_list

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Pyrogram: {e}")
        return []


async def get_all_chat_messages(chat_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞"""
    all_messages = []
    last_message_id = None
    total_messages = 0

    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π...")

    while True:
        messages_batch = await get_messages_batch(chat_id, last_message_id)

        if not messages_batch:
            break

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
        for message in messages_batch:
            all_messages.append(message)
            last_message_id = message.id
            total_messages += 1

        print(f"üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}")

        # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–æ –º–µ–Ω—å—à–µ limit, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–∞—á–∫–∞
        if len(messages_batch) < 100:
            break

        # –ü–∞—É–∑–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram API
        await asyncio.sleep(1)

    print(f"‚úÖ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}")
    return all_messages


async def save_pyrogram_message(message) -> bool:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Pyrogram –≤ MongoDB"""
    try:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
        if not message.text and not message.caption:
            return False

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_id = None
        username = None
        first_name = None

        if message.from_user:
            user_id = message.from_user.id
            username = message.from_user.username
            first_name = message.from_user.first_name

        message_data = {
            "message_id": message.id,
            "chat_id": message.chat.id,
            "user_id": user_id,
            "username": username,
            "first_name": first_name,
            "text": message.text or message.caption or "",
            "date": message.date,
            "message_type": str(message.service) if message.service else "text",
            "media_type": str(message.media) if message.media else None,
            "has_media": bool(message.media),
            "saved_at": dt.datetime.now()
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        result = messages_collection.update_one(
            {
                "message_id": message.id,
                "chat_id": message.chat.id
            },
            {"$set": message_data},
            upsert=True
        )

        return True

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {e}")
        return False


async def get_all_chat_members(chat_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ Pyrogram"""
    try:
        members = []
        total_members = 0

        print("üë• –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")

        async for member in app.get_chat_members(chat_id):
            members.append(member)
            total_members += 1
            print(f"–ü–æ–ª—É—á–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_members}")

            # –ü–∞—É–∑–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã
            if total_members % 50 == 0:
                await asyncio.sleep(1)

        print(f"‚úÖ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_members}")
        return members

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
        return []


async def save_chat_members_pyrogram(chat_id: int):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ Pyrogram"""
    try:
        members = await get_all_chat_members(chat_id)
        saved_count = 0

        for member in members:
            user = member.user
            if await save_user_from_pyrogram(user):
                saved_count += 1

        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –±–∞–∑—É: {saved_count}")
        return saved_count

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
        return 0


async def save_user_from_pyrogram(user) -> bool:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Pyrogram –≤ MongoDB"""
    try:
        user_data = {
            "user_id": user.id,
            "username": user.username,
            "first_name": user.first_name,
            "last_name": user.last_name,
            "is_bot": user.is_bot,
            "is_premium": getattr(user, 'is_premium', False),
            "language_code": user.language_code,
            "saved_at": dt.datetime.now()
        }

        users_collection.update_one(
            {"user_id": user.id},
            {"$set": user_data},
            upsert=True
        )
        return True

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
        return False


@router.message(Command('migrate'))
async def complete_migration(message: Message):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é"""
    await bot.send_message(
        chat_id=MY_TELEGRAM_ID,
        text="üöÄ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏..."
    )
    try:
        # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Pyrogram
        all_messages = await get_all_chat_messages(OTKAZ_GROUP_ID)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        saved_count = 0
        for message in all_messages:
            if await save_pyrogram_message(message):
                saved_count += 1

        # 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ Pyrogram
        saved_users = await save_chat_members_pyrogram(OTKAZ_GROUP_ID)

        # 3. –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º aiogram)
        # print("üì§ –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É...")
        # migrated_messages, failed_messages = await migrate_messages_to_new_chat()

        # # 4. –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        # print("‚ûï –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É...")
        # invited_users, failed_invites = await invite_users_to_new_chat()

        # 5. –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = f"""
            üìä –û–¢–ß–ï–¢ –û –ú–ò–ì–†–ê–¶–ò–ò (Pyrogram)

            ‚úÖ –£—Å–ø–µ—à–Ω–æ:
            - –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Pyrogram: {len(all_messages)}
            - –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑—É: {saved_count}
            - –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {saved_users}
        """

        await bot.send_message(
            chat_id=MY_TELEGRAM_ID,
            text=report
        )

    except Exception as e:
        await report_error(e)
