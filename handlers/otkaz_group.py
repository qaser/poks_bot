import datetime as dt
import asyncio

from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command

from config.bot_config import bot
from config.mongo_config import users_collection, messages_collection, migration_status_collection
from config.telegram_config import MY_TELEGRAM_ID, NEW_OTKAZ_GROUP, OTKAZ_GROUP_ID
from config.pyrogram_config import app
from utils.utils import report_error

router = Router()


# === –§–£–ù–ö–¶–ò–ò –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ò ===

def normalize_chat_id(chat_id: int) -> int:
    """
    –ü—Ä–∏–≤–æ–¥–∏—Ç chat_id –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É.
    Telegram API (Pyrogram/Telethon):
    - —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ -100XXXXXXXXXX
    - –æ–±—ã—á–Ω—ã–µ –≥—Ä—É–ø–ø—ã –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ—Å—Ç–æ -XXXXXXXX
    """
    s = str(chat_id)
    if s.startswith('-') and not s.startswith('-100'):
        return int('-100' + s[1:])
    return int(chat_id)


# –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º chat_id –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ
OTKAZ_GROUP_ID = normalize_chat_id(OTKAZ_GROUP_ID)
NEW_OTKAZ_GROUP = normalize_chat_id(NEW_OTKAZ_GROUP)

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
USE_PYROGRAM_FOR_INVITES = True   # True = —é–∑–µ—Ä-–±–æ—Ç –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç, False = –æ–±—ã—á–Ω—ã–π –±–æ—Ç


# ==============================
# –†–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
# ==============================

async def save_user(user) -> bool:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (aiogram user)"""
    try:
        user_data = {
            "user_id": user.id,
            "username": user.username,
            "first_name": user.first_name,
            "last_name": user.last_name,
            "is_bot": user.is_bot,
            "saved_at": dt.datetime.now()
        }
        users_collection.update_one({"user_id": user.id}, {"$set": user_data}, upsert=True)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False


async def save_user_from_pyrogram(user) -> bool:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Pyrogram"""
    try:
        user_data = {
            "user_id": user.id,
            "username": user.username,
            "first_name": user.first_name,
            "last_name": user.last_name,
            "is_bot": user.is_bot,
            "is_premium": getattr(user, 'is_premium', False),
            "language_code": getattr(user, 'language_code', None),
            "saved_at": dt.datetime.now()
        }
        users_collection.update_one({"user_id": user.id}, {"$set": user_data}, upsert=True)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
        return False


async def get_all_chat_members(chat_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ Pyrogram"""
    members = []
    try:
        print("üë• –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
        async for member in app.get_chat_members(chat_id):
            members.append(member)
            if len(members) % 50 == 0:
                await asyncio.sleep(1)
        print(f"‚úÖ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(members)}")
    except Exception as e:
        await report_error(e)
    return members


async def collect_chat_users(chat_id: int):
    """–°–æ–±–∏—Ä–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Pyrogram, Aiogram –∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    users = {}
    saved_count = 0

    # --- 1. Pyrogram (–µ—Å–ª–∏ –¥–∞—Å—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤) ---
    try:
        async for member in app.get_chat_members(chat_id):
            u = member.user
            users[u.id] = {
                "user_id": u.id,
                "username": u.username,
                "first_name": u.first_name,
                "last_name": u.last_name,
                "is_bot": u.is_bot,
                "source": "pyrogram"
            }
        print(f"üë§ Pyrogram –Ω–∞—à—ë–ª {len(users)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
    except Exception as e:
        print(f"‚ö†Ô∏è Pyrogram –Ω–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")

    # --- 2. Aiogram (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã) ---
    try:
        admins = await bot.get_chat_administrators(chat_id)
        for admin in admins:
            u = admin.user
            users[u.id] = {
                "user_id": u.id,
                "username": u.username,
                "first_name": u.first_name,
                "last_name": u.last_name,
                "is_bot": u.is_bot,
                "source": "bot_admin"
            }
        print(f"ü§ñ Aiogram –¥–æ–±–∞–≤–∏–ª {len(admins)} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
    except Exception as e:
        print(f"‚ö†Ô∏è Aiogram –Ω–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤: {e}")

    # --- 3. –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ from_user) ---
    try:
        messages = list(messages_collection.find())
        for m in messages:
            if m.get("user_id"):
                users[m["user_id"]] = {
                    "user_id": m["user_id"],
                    "username": m.get("username"),
                    "first_name": m.get("first_name"),
                    "last_name": m.get("last_name"),
                    "is_bot": False,
                    "source": "messages"
                }
        print(f"üí¨ –ò–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —é–∑–µ—Ä–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

    # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ—Ö –≤ MongoDB ---
    for u in users.values():
        try:
            users_collection.update_one(
                {"user_id": u["user_id"]},
                {"$set": {**u, "saved_at": dt.datetime.now()}},
                upsert=True
            )
            saved_count += 1
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ {u}: {e}")

    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –±–∞–∑—É: {saved_count}")
    return saved_count



# ==============================
# –†–∞–±–æ—Ç–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
# ==============================

async def save_pyrogram_message(message) -> bool:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Pyrogram –≤ MongoDB"""
    try:
        if not message.text and not message.caption:
            return False

        message_data = {
            "message_id": message.id,
            "chat_id": message.chat.id,
            "user_id": message.from_user.id if message.from_user else None,
            "username": message.from_user.username if message.from_user else None,
            "first_name": message.from_user.first_name if message.from_user else None,
            "text": message.text or message.caption or "",
            "date": message.date,
            "has_media": bool(message.media),
            "saved_at": dt.datetime.now()
        }

        messages_collection.update_one(
            {"message_id": message.id, "chat_id": message.chat.id},
            {"$set": message_data},
            upsert=True
        )
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {e}")
        return False


async def get_all_chat_messages(chat_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞ —á–µ—Ä–µ–∑ Pyrogram"""
    all_messages = []
    try:
        async for message in app.get_chat_history(chat_id, limit=0):  # limit=0 = –≤—Å—è –∏—Å—Ç–æ—Ä–∏—è
            all_messages.append(message)
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(all_messages)}")
    except Exception as e:
        await report_error(e)
    return list(reversed(all_messages))  # –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ


async def migrate_messages_to_new_chat():
    """–ü–µ—Ä–µ–Ω–æ—Å–∏—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É"""
    messages = list(messages_collection.find().sort("date", 1))
    print(f"üì§ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")

    failed = []
    success = 0
    for m in messages:
        try:
            text = f"üí¨ {m['text']}\n\nüìÖ {m['date'].strftime('%Y-%m-%d %H:%M')}"
            # –¥–µ–ª–∏–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            chunks = [text[i:i+4000] for i in range(0, len(text), 4000)]
            for chunk in chunks:
                await bot.send_message(chat_id=NEW_OTKAZ_GROUP, text=chunk)
                await asyncio.sleep(0.5)
            success += 1
            print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success}/{len(messages)}")
        except Exception as e:
            failed.append({"message_id": m["message_id"], "error": str(e)})
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {m['message_id']}: {e}")

    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}, –æ—à–∏–±–æ–∫: {len(failed)}")
    return success, failed


# ==============================
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
# ==============================

async def invite_users_with_bot():
    """–î–æ–±–∞–≤–ª—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–æ—Ç–æ–º"""
    users = list(users_collection.find({"is_bot": False}))
    failed = []
    success = 0
    for u in users:
        uid = u["user_id"]
        try:
            try:
                await bot.ban_chat_member(NEW_OTKAZ_GROUP, uid)
                await bot.unban_chat_member(NEW_OTKAZ_GROUP, uid)
                success += 1
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω {uid}")
            except Exception:
                link = await bot.create_chat_invite_link(
                    NEW_OTKAZ_GROUP, member_limit=1, creates_join_request=True
                )
                failed.append({"user_id": uid, "username": u.get("username"), "invite_link": link.invite_link})
        except Exception as e:
            failed.append({"user_id": uid, "username": u.get("username"), "error": str(e)})
        await asyncio.sleep(1)

    migration_status_collection.update_one(
        {"migration_type": "user_invites"},
        {"$set": {"failed_invites": failed, "success_count": success, "processed_at": dt.datetime.now()}},
        upsert=True
    )
    return success, failed


async def invite_users_with_pyrogram():
    """–î–æ–±–∞–≤–ª—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —é–∑–µ—Ä-–±–æ—Ç–æ–º"""
    users = list(users_collection.find({"is_bot": False}))
    failed, success = [], 0
    for u in users:
        try:
            await app.add_chat_members(NEW_OTKAZ_GROUP, [u["user_id"]])
            success += 1
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω {u['user_id']}")
        except Exception as e:
            failed.append({"user_id": u["user_id"], "username": u.get("username"), "error": str(e)})
        await asyncio.sleep(1)
    return success, failed


async def check_access():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Å—Ç–∞—Ä–æ–π –∏ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø–µ –¥–ª—è –±–æ—Ç–∞ –∏ —é–∑–µ—Ä-–±–æ—Ç–∞"""
    report_lines = ["üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç–∞–º:\n"]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –±–æ—Ç–æ–º
    for chat_id, label in [(OTKAZ_GROUP_ID, "–°—Ç–∞—Ä–∞—è –≥—Ä—É–ø–ø–∞"), (NEW_OTKAZ_GROUP, "–ù–æ–≤–∞—è –≥—Ä—É–ø–ø–∞")]:
        try:
            chat = await bot.get_chat(chat_id)
            report_lines.append(f"ü§ñ –ë–æ—Ç: ‚úÖ –¥–æ—Å—Ç—É–ø –∫ {label} ‚Äî {chat.title}")
        except Exception as e:
            report_lines.append(f"ü§ñ –ë–æ—Ç: ‚ùå –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ {label} ‚Äî {e}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ —é–∑–µ—Ä-–±–æ—Ç–æ–º (Pyrogram)
    for chat_id, label in [(OTKAZ_GROUP_ID, "–°—Ç–∞—Ä–∞—è –≥—Ä—É–ø–ø–∞"), (NEW_OTKAZ_GROUP, "–ù–æ–≤–∞—è –≥—Ä—É–ø–ø–∞")]:
        try:
            chat = await app.get_chat(chat_id)
            report_lines.append(f"üë§ –Æ–∑–µ—Ä-–±–æ—Ç: ‚úÖ –¥–æ—Å—Ç—É–ø –∫ {label} ‚Äî {chat.title}")
        except Exception as e:
            report_lines.append(f"üë§ –Æ–∑–µ—Ä-–±–æ—Ç: ‚ùå –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ {label} ‚Äî {e}")

    report_text = "\n".join(report_lines)
    await bot.send_message(MY_TELEGRAM_ID, report_text)
    return report_text


# ==============================
# –ü–æ–ª–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è
# ==============================

@router.message(Command("migrate"))
async def complete_migration(message: Message):
    messages_collection.delete_many({})
    await bot.send_message(MY_TELEGRAM_ID, "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é...")
    access_report = await check_access()

    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ä–æ–π –∏–ª–∏ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø–µ ‚Äî –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
    if "‚ùå" in access_report:
        await bot.send_message(MY_TELEGRAM_ID, "‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–¥–Ω–æ–π –∏–∑ –≥—Ä—É–ø–ø.")
        return
    try:
        # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        all_messages = await get_all_chat_messages(OTKAZ_GROUP_ID)
        saved_msgs = 0
        for m in all_messages:
            if await save_pyrogram_message(m):
                saved_msgs += 1

        # 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        saved_users = await collect_chat_users(OTKAZ_GROUP_ID)

        # # 3. –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
        # migrated, failed_msgs = await migrate_messages_to_new_chat()

        # # 4. –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        # if USE_PYROGRAM_FOR_INVITES:
        #     invited, failed_invites = await invite_users_with_pyrogram()
        # else:
        #     invited, failed_invites = await invite_users_with_bot()

        # 5. –û—Ç—á–µ—Ç
        report = f"""
        üìä –û–¢–ß–ï–¢ –û –ú–ò–ì–†–ê–¶–ò–ò

        ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ: {len(all_messages)}
        üíæ –°–æ–æ–±—â–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {saved_msgs}

        üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {saved_users}
        """

        await bot.send_message(MY_TELEGRAM_ID, report)

    except Exception as e:
        await report_error(e)
